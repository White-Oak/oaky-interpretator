Запуск осуществляется в два этапа: компиляция и выполнение.
Компиляция осуществляется за один проход(single-pass), поэтому время выполнения скриптов всё еще можно уменьшить(хотя и сейчас это время колеблется около 1 миллисекунды).

Общий синтаксис:
На каждое выражение отводится ровно одна строка. Фактически, перевод строки обозначает конец выражения(\n или \r\n).



Комментарии(SUCCESS) занимают по одной строке(следствие из верхнего условия). Например:
	//Это не будет обрабатываться интерпретатором



Условие(SUCCESS) - if (if_case) {
Строка с условием обязательно должна кончаться {. В условии могут использоваться константы/переменные, но не могут использоваться методы. Выход из этого положения:
	
	var = method {}
	if(var == 1) {
	}

Блок условия как и остальные контейнеры заканчивается одинарной фигурной скобкой. Закрывающая фигурная скобка - выражение, поэтому должна находится в отдельной строчке.
Для условия с else следует использовать такую конструкцию:
	var = method {}
	if(var == 1) {
	} 
	else {
	}
Что на самом деле меняется на 
	if(var == 1) {
	} 
	if(var != 1) {
	}

Вызов функции(SUCCESS) осуществляется через уникальное имя и перечислением через запятую параметров внутри фигурных скобок:
	callFunction {1, 2, 5}
Все параметры трактуются как строки.
Если в параметре содержится запятая, то параметр следует взять в кавычки:
	callFunction {1, "Hey, you!", Hey}
Отсутствие вызываемой функции вызывает InvalidCallException времени выполнения



Объявление переменной(SUCCESS). Для того, чтобы объявить новую переменную достаточно присвоить ей некоторое значение:
	var = 5
	//if не является запрещенным управляемым словом. Но его не рекомендуется использовать. Следующая строчка выбросит предупреждение
	if = if
Если в присваимом значении присутствуют фигурные скобки, значение необходимо взять в кавычки.
Внимание! Все объявленные переменные являются глобальными:

	a = 1
	if (a > 0){
		b = a
	}
	//Не будет ошибкой
	println {b}

Нельзя объявить переменную, которая бы перекрывала ранее объявленную константу, это вызовет AccessChangedException времени выполнения.
При отсутствии вызываемой переменной/константы вызывается NullPointerException времни выполнения.
Объявленная константа сотрёт объявленную раньше переменную с таким же именем.



Функции(UNDEFINED). На данный момент компилятор является single-pass, то есть осуществляет компиляцию за один проход, поэтому перед тем как использовать функцию её необходимо определить.
Определение функции выглядит так:

	function functionName () {
		//некоторый код
	}

return(SUCCESS) - единственная константа, которую можно изменить в функциях. Содержит значение возвращаемое функцией. После присвоения ей значение функция возвращает управление вызвавшему её коду:

	function delegateRand () {
		return = rand {}
	//Следующий код никогда не будет выполнен
	println {"Hm..."}
	}
	delegateRand {}
	if (return == 0){
		exit {}
	}

Если функция не содержит присвоения return значения, то такая функция может называться процедурой.
Выражение var = funct {} трактуется компилятором так:
1. Вызывается функция funct без параметров
2. var присваивается ТЕКУЩЕЕ значение retur
(SUCCESS)То есть var = funct {} разворачивается в:
	
	funct {}
	var = return

Такое использование опасно тем, что функция может и не возвращать значения, но переменной всё равно будет присвоено значение.

Перегрузка функций(SUCCESS). При компиляции к определениям функций добавляется количество параметров, поэтому можно свободно перегружать функции:

	function f () {
		return = 0
	}
	function f (var) {
		return = 0
	}
	f {}
	f {2}

Этот код будет преобразован компилятором в:

	function f () {
		return = 0
	}
	function f_1 (var) {
		return = 0
	}
	f {}
	f_1 {2}



Циклы. 
While.
For.



Предобъявления. Некоторые константы и функции могут быть предопределены имплементацией.При этом функции могут быть как native, так и user-defined. Native обозначает, что для вызова функции во время выполнения будет вызван метод, написанный на Java. Подробнее в документации.






Предобъявленные константы и функции языка:
println {par} - выводит в консоль par
destroy {_var} - уничтожает переменную с именем var, если такой переменной нет ничего не происходит. Подчёркивание перед именем переменной обязательно, иначе компилятор воспримет это как знак того, что необходимо подставить значение переменной, вместо того, чтобы передать текстовое значение
rand {} - возвращает случаное число
rand {int} - возвращает случайное число между 0 и int
time {} - возвращает время, прошедшее с запуска программы в миллисекундах
---UNDEFINED---
date {} - возвращает дату в формате dd.mm.yyyy
exit {} - досрочное завершение скрипта


